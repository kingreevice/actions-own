name: Build and Save Cheerio for JSBox

on:
  schedule:
    - cron: "0 0 * * *"  # 每天运行一次（可以根据需要调整）
  workflow_dispatch:  # 手动触发

jobs:
  build-cheerio:
    runs-on: ubuntu-latest

    steps:
    # 1. 检出代码仓库
    - name: Checkout the repository
      uses: actions/checkout@v3

    # 2. 下载 Cheerio 最新源码
    - name: Download Cheerio source
      run: |
        git clone --depth=1 https://github.com/cheeriojs/cheerio.git cheerio-latest

    # 3. 设置 Node.js 环境
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    # 4. 安装依赖并构建
    - name: Install and Build Cheerio
      working-directory: cheerio-latest
      run: |
        npm install
        npm run build  # 生成 dist 文件
        ls -alh dist/  # 查看 dist 文件夹的内容

    # 5. 获取最新的标签并生成新的标签
    - name: Get latest tag
      run: |
        latest_tag=$(git tag --sort=-v:refname | head -n 1)
        echo "Latest tag is: $latest_tag"
        
        # 获取版本号并递增
        if [[ $latest_tag =~ v([0-9]+) ]]; then
          version_number=${BASH_REMATCH[1]}
          new_version_number=$((version_number + 1))
          new_tag="v$new_version_number"
        else
          new_tag="v1"  # 如果没有找到标签，则从 v1 开始
        fi

        echo "New tag will be: $new_tag"
        echo "new_tag=$new_tag" >> $GITHUB_ENV  # 将新标签保存到环境变量

    # 6. 创建 GitHub Release
    - name: Create Release
      id: release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.new_tag }}  # 使用新生成的标签
        release_name: "Cheerio Build ${{ env.new_tag }}"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 7. 上传构建结果到 GitHub Release
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}  # 从创建 Release 步骤中获取 upload_url
        asset_path: cheerio-latest/dist/  # 构建后的文件路径
        asset_name: cheerio-jsbox.zip  # 上传的文件名称
        asset_content_type: application/zip  # 文件类型，适用于 zip 文件
